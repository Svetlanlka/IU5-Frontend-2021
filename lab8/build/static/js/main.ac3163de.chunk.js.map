{"version":3,"sources":["MyElem.js","MyForm.js","App.js","reportWebVitals.js","index.js"],"names":["MyElem","elem","toggleElem","deleteElem","className","done","onClick","id","text","type","MyForm","addElem","useState","userInput","setUserInput","onSubmit","e","preventDefault","value","onChange","currentTarget","placeholder","App","todos","setTodos","handleToggle","map","filter","inputText","newValue","Math","random","toString","substr","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAceA,MAdf,YAAmD,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAChC,OACI,sBAAmBC,UAAU,YAA7B,UACI,qBAAKA,UAAWH,EAAKI,KAAO,sBAAwB,YAAaC,QAAS,kBAAMJ,EAAWD,EAAKM,KAAhG,SACKN,EAAKO,OAEV,sBAAKJ,UAAU,eAAf,UACI,sBAAMA,UAAY,cAAlB,oBACA,uBAAOK,KAAK,WAAWL,UAAU,cAAcE,QAAS,kBAAMH,EAAWF,EAAKM,YAN5EN,EAAKM,KCmBRG,MAnBf,YAA8B,IAAZC,EAAW,EAAXA,QACd,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAYA,OAAQ,uBAAMC,SANO,SAACC,GAClBA,EAAEC,iBACFN,EAAQE,GACRC,EAAa,KAGT,UACA,uBAAOI,MAAOL,EAAWJ,KAAK,OAAOL,UAAU,OAAOe,SAXzC,SAACH,GAClBF,EAAaE,EAAEI,cAAcF,QAUqDG,YAAY,0BAC1F,0FCqBGC,MAlCf,WACE,MAA0BV,mBAAS,IAAnC,mBAAOW,EAAP,KAAcC,EAAd,KAEMC,EAAe,SAAClB,GACpBiB,EAAS,YAAID,EAAMG,KAAI,SAACzB,GAAD,OACnBA,EAAKM,KAAOA,EAAZ,2BAAsBN,GAAtB,IAA4BI,MAAOJ,EAAKI,OAAxC,eAAqDJ,SAcrDE,EAAa,SAACI,GAASiB,EAAS,YAAID,EAAMI,QAAO,SAAC1B,GAAD,OAAUA,EAAKM,KAAOA,QAG7E,OACE,sBAAKH,UAAU,MAAf,UACE,2CACA,cAAC,EAAD,CAAQO,QAhBI,SAACiB,GACf,GAAIA,EAAW,CACb,IAAMC,EAAW,CACftB,GAAIuB,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAE,GACxCzB,KAAMoB,EACNvB,MAAM,GACRmB,EAAS,GAAD,mBAAKD,GAAL,CAAYM,SAWnBN,EAAMG,KAAI,SAACzB,GACV,OAAQ,cAAC,EAAD,CAAQA,KAAMA,EAAoBC,WAAYuB,EAActB,WAAYA,GAA/CF,EAAKM,OAExC,qDAAwBgB,EAAMW,cCrBrBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ac3163de.chunk.js","sourcesContent":["function MyElem({ elem, toggleElem, deleteElem }) {\r\n    return (\r\n        <div key={elem.id} className=\"todo_elem\">\r\n            <div className={elem.done ? \"todo_text todo_done\" : \"todo_text\"} onClick={() => toggleElem(elem.id)}>\r\n                {elem.text}\r\n            </div>\r\n            <div className=\"block_delete\">\r\n                <span className = \"text_delete\">delete</span>\r\n                <input type=\"checkbox\" className=\"todo_delete\" onClick={() => deleteElem(elem.id)}></input>\r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyElem","import { useState } from 'react'\r\n\r\nfunction MyForm({ addElem }) {\r\n    const [userInput, setUserInput] = useState('')\r\n\r\n    const handleChange = (e) => {\r\n        setUserInput(e.currentTarget.value)\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        addElem(userInput)\r\n        setUserInput(\"\")\r\n    }\r\n    \r\n    return (<form onSubmit={handleSubmit}>\r\n            <input value={userInput} type=\"text\" className=\"todo\" onChange={handleChange} placeholder=\"Enter new task to add\"/>        \r\n            <button>Добавить</button>\r\n        </form>)\r\n}\r\n\r\nexport default MyForm","import { useState } from 'react'\r\nimport MyElem from './MyElem'\r\nimport MyForm from './MyForm'\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState([])\r\n\r\n  const handleToggle = (id) => {\r\n    setTodos([...todos.map((elem) => \r\n        elem.id === id ? { ...elem, done: !elem.done } : {...elem })\r\n    ])\r\n  }\r\n\r\n  const addElem = (inputText) => {\r\n    if (inputText) {\r\n      const newValue = {\r\n        id: Math.random().toString(36).substr(2,9),\r\n        text: inputText,\r\n        done: false }\r\n      setTodos([...todos, newValue])\r\n    }\r\n  }\r\n\r\n  const deleteElem = (id) => { setTodos([...todos.filter((elem) => elem.id !== id)]) }\r\n\r\n \r\n  return (\r\n    <div className=\"App\">\r\n      <h1>ToDo List</h1>\r\n      <MyForm addElem={addElem} />\r\n      {todos.map((elem) => {\r\n        return (<MyElem elem={elem} key={elem.id} toggleElem={handleToggle} deleteElem={deleteElem}/>)\r\n      })}\r\n      <h2>Count of elements: {todos.length}</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}